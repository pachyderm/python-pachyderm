version: 2.1

commands:
  deploy-pachyderm:
    steps:
      - run:
          name: Install dependencies
          command: etc/testing/circle/install.sh
      - run:
          name: Start minikube
          command: etc/testing/circle/start-minikube.sh
      - run:
          name: Deploy pachyderm
          command: etc/testing/circle/deploy-pachyderm.sh

  install-python:
    parameters:
      version:
        type: string
    steps:
        - run:
            name: Install python
            command: |
                git -C "/opt/circleci/.pyenv/" checkout master -q
                git -C "/opt/circleci/.pyenv/" pull -q
                pyenv install <<parameters.version>>
                pyenv global <<parameters.version>>

  install-poetry:
    steps:
      - run:
          name: Install poetry
          command: |
            curl -fsS -o install-poetry.py https://install.python-poetry.org
            python3 install-poetry.py
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
            rm install-poetry.py

  create-venv:
    steps:
      - run:
          name: Create virtual environment
          command: poetry install -v

jobs:
  unit-tests:
    resource_class: large
    parameters:
      python-version:
        type: string
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - deploy-pachyderm
      - install-python:
          version: <<parameters.python-version>>
      - install-poetry
      - create-venv
      - run:
          name: Run unit tests
          command: |
            pachctl port-forward &
            poetry run pytest tests
      - run:
          when: on_fail
          command: etc/testing/circle/kube_debug.sh

  examples:
    resource_class: large
    parameters:
      python-version:
        type: string
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - deploy-pachyderm
      - install-python:
          version: <<parameters.python-version>>
      - install-poetry
      - create-venv
      - run:
          name: Run opencv example
          command: |
            pachctl port-forward &
            poetry run python ./examples/opencv/opencv.py
      - run:
          when: on_fail
          command: etc/testing/circle/kube_debug.sh

  linting:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install-poetry
      - create-venv
      - run:
          name: Run linting
          command: make lint

  tox:
    resource_class: large
    parameters:
      toxenv:
        type: string
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: etc/testing/circle/install.sh
      - when:
          condition:
            not:
              equal: [ lint, <<parameters.toxenv>> ]
          steps:
            - run:
                name: Start minikube
                command: etc/testing/circle/start-minikube.sh
            - run:
                name: Deploy pachyderm
                command: etc/testing/circle/deploy-pachyderm.sh
      - run:
          name: TOXENV=<<parameters.toxenv>> tox
          command: |
            pachctl port-forward &
            export PATH="$HOME/.local/bin:$PATH"
            python3 -m tox
          environment:
            TOXENV: << parameters.toxenv >>
      - run:
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
  test-publish:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install-poetry
      - create-venv
      - run:
          name: build + publish
          command: |
            poetry publish --build --repository testpypi --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  circleci:
    jobs:
      - unit-tests:
          matrix:
            parameters:
              python-version:
                - 3.7.10
                - 3.10.4
          filters:
            tags:
              only: /.*/
      - examples:
          parameters:
            python-version: 3.9.6
          filters:
            tags:
              only: /.*/
      - linting:
          filters:
            tags:
              only: /.*/
      - tox:
          matrix:
            parameters:
              toxenv:
                - py37
                - py310
                - lint
                - examples
          filters:
            tags:
              only: /.*/
      - test-publish:
          requires:
            - tox
          filters:
            tags:
              only: /^\d+\.\d+\.\d.*/
            branches:
              ignore: /.*/
