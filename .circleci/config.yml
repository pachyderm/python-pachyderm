version: 2.1

parameters:
  machine_image:
    type: string
    default: ubuntu-2204:2023.04.2

commands:
  start-minikube:
    steps:
      - run:
          name: Start minikube
          command: |
            KUBE_VERSION="$(jq -r .kubernetes < version.json)"
            minikube start --vm-driver=docker --kubernetes-version=${KUBE_VERSION} --wait=all

  wait-for-pach:
    steps:
      - run:
          name: Wait for pachyderm
          command: |
            kubectl wait --for=condition=available deployment -l app=pachd --timeout=5m
  deploy-pachyderm:
    steps:
      - run:
          name: Install dependencies
          command: etc/testing/circle/install.sh
      - run:
          name: Add deps to path
          command: |
            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
      - start-minikube
      - run:
          name: Deploy pachyderm
          command: |
            PACHYDERM_VERSION="$(jq -r .pachyderm version.json)"
            helm repo add pachyderm https://pachyderm.github.io/helmchart
            helm repo update
            helm install pachd pachyderm/pachyderm --set deployTarget=LOCAL,proxy.service.type=NodePort --version ${PACHYDERM_VERSION}

  install-python:
    parameters:
      version:
        type: string
    steps:
      - restore_cache:
          key: python-pach-pyenv-v1-<< parameters.version >>
      - run:
          name: Install python
          command: |
            git -C "/opt/circleci/.pyenv/" checkout master -q
            git -C "/opt/circleci/.pyenv/" pull -q
            pyenv install -s <<parameters.version>>
            pyenv global <<parameters.version>>
      - save_cache:
          key: python-pach-pyenv-v1-<< parameters.version >>
          paths:
            - /opt/circleci/.pyenv/versions/<< parameters.version >>

  install-poetry:
    steps:
      - run:
          name: Install poetry
          command: |
            curl -fsS -o install-poetry.py https://install.python-poetry.org
            python3 install-poetry.py --version 1.2.2
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
            rm install-poetry.py

  create-venv:
    steps:
      - run:
          name: Create virtual environment
          command: poetry install -v

jobs:
  unit-tests:
    resource_class: large
    parameters:
      python-version:
        type: string
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - deploy-pachyderm
      - install-python:
          version: <<parameters.python-version>>
      - install-poetry
      - create-venv
      - wait-for-pach
      - run:
          name: Run unit tests
          command: |
            pachctl port-forward &
            mkdir -p test-results
            poetry run pytest -v --junitxml=test-results/junit.xml tests
          no_output_timeout: 20m
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - run:
          when: on_fail
          command: etc/testing/circle/kube_debug.sh

  examples:
    resource_class: large
    parameters:
      python-version:
        type: string
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - deploy-pachyderm
      - install-python:
          version: <<parameters.python-version>>
      - install-poetry
      - create-venv
      - wait-for-pach
      - run:
          name: Run opencv example
          command: |
            pachctl port-forward &
            poetry run python ./examples/opencv/opencv.py
          no_output_timeout: 20m
      - run:
          when: on_fail
          command: etc/testing/circle/kube_debug.sh

  linting:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install-poetry
      - create-venv
      - run:
          name: Run linting
          command: poetry run make lint

  test-publish:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - install-poetry
      - create-venv
      - run:
          name: build + publish
          command: |
            poetry publish --build --repository testpypi --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  circleci:
    jobs:
      - unit-tests:
          matrix:
            parameters:
              python-version:
                - 3.8.16
                - 3.11.3
          filters:
            tags:
              only: /.*/
      - examples:
          python-version: 3.10.11
          filters:
            tags:
              only: /.*/
      - linting:
          filters:
            tags:
              only: /.*/
      - test-publish:
          requires:
            - unit-tests
            - examples
            - linting
          filters:
            tags:
              only: /^\d+\.\d+\.\d.*/
            branches:
              ignore: /.*/
