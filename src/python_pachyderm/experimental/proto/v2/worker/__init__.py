# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: python_pachyderm/proto/v2/worker/worker.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class CancelRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    data_filters: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CancelResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class NextDatumRequest(betterproto.Message):
    """
    Error indicates that the processing of the current datum errored. Datum
    error semantics with datum batching enabled are similar to datum error
    semantics without datum batching enabled in that the datum may be retried,
    recovered, or result with a job failure.
    """

    error: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NextDatumResponse(betterproto.Message):
    """
    Env is a list of environment variables that should be set for the
    processing of the next datum.
    """

    env: List[str] = betterproto.string_field(1)


class WorkerStub(betterproto.ServiceStub):
    async def status(self) -> "__pps_v2__.WorkerStatus":

        request = betterproto_lib_google_protobuf.Empty()

        return await self._unary_unary(
            "/pachyderm.worker.Worker/Status", request, __pps_v2__.WorkerStatus
        )

    async def cancel(
        self, *, job_id: str = "", data_filters: Optional[List[str]] = None
    ) -> "CancelResponse":
        data_filters = data_filters or []

        request = CancelRequest()
        request.job_id = job_id
        request.data_filters = data_filters

        return await self._unary_unary(
            "/pachyderm.worker.Worker/Cancel", request, CancelResponse
        )

    async def next_datum(self, *, error: str = "") -> "NextDatumResponse":

        request = NextDatumRequest()
        request.error = error

        return await self._unary_unary(
            "/pachyderm.worker.Worker/NextDatum", request, NextDatumResponse
        )


class WorkerBase(ServiceBase):
    async def status(self) -> "__pps_v2__.WorkerStatus":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel(
        self, job_id: str, data_filters: Optional[List[str]]
    ) -> "CancelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def next_datum(self, error: str) -> "NextDatumResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_status(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.status(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_cancel(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "job_id": request.job_id,
            "data_filters": request.data_filters,
        }

        response = await self.cancel(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_next_datum(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "error": request.error,
        }

        response = await self.next_datum(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/pachyderm.worker.Worker/Status": grpclib.const.Handler(
                self.__rpc_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                __pps_v2__.WorkerStatus,
            ),
            "/pachyderm.worker.Worker/Cancel": grpclib.const.Handler(
                self.__rpc_cancel,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelRequest,
                CancelResponse,
            ),
            "/pachyderm.worker.Worker/NextDatum": grpclib.const.Handler(
                self.__rpc_next_datum,
                grpclib.const.Cardinality.UNARY_UNARY,
                NextDatumRequest,
                NextDatumResponse,
            ),
        }


from ... import pps_v2 as __pps_v2__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
